// practica n1 abstracta.cpp : Este archivo contiene la función "main". La ejecución del programa comienza y termina ahí.
//

#include<iostream>
#include<string>
#include<thread>
#include<cstdlib>
#include<ctime>
#include<chrono>
#include<windows.h>
#include <random>

using namespace std;

const int width = 70;
const int flipsPerLine = 5;
const int sleepTime = 20;


class cesar
{

public:
	string abcMinusculas = "abcdefghijklmnopqrstuvwxyz";
	string abcMayusculas = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

	string encriptar(string& mensaje, int a);
	string desencriptar(string& mensaje, int a);
	int modulo(int sumres, int len);
	void matrix();

};

string cesar::encriptar(string& mensaje, int a) {

	int abc_l = abcMayusculas.length();
	int mensage_l = mensaje.length();

	for (int i = 0; i < mensage_l; i++) {
		for (int j = 0; j < abc_l; j++) {
			if (mensaje[i] == abcMinusculas[j]) {
				int result = modulo(j + a, abc_l);
				mensaje[i] = abcMinusculas[result];
				break;
			}
		}
		for (int j = 0; j < abc_l; j++) {
			if (mensaje[i] == abcMayusculas[j]) {
				int result = modulo(j + a, abc_l);
				mensaje[i] = abcMayusculas[result];
				break;
			}
		}

	}
	cout << mensaje;
	return "";
}
string cesar::desencriptar(string& mensaje, int a) {

	return encriptar(mensaje, -a);
}

int cesar::modulo(int sumres, int len) {
	{
		int div = sumres / len;
		int newPos = sumres - (div * len);

		if (newPos < 0) {
			div--;
			newPos = sumres - (div * len);
		}
		return newPos;
	}
}
void cesar::matrix() {
	system("cls");
	int i = 0, x = 0;
	srand(time(NULL));


	bool switches[width] = { 0 };

	const string ch = "1234567890qwertyuiopasdfghjkl"
		"zxcvbnm,./';[]!@#$%^&*()-=_+";
	const int l = ch.size();

	system("Color 0A");

	int j = 0;
	while (j <= 60)
	{

		for (i = 0; i < width; i += 2)
		{

			if (switches[i])
				cout << ch[rand() % l] << " ";
			else
				cout << "  ";
		}

		for (i = 0; i != flipsPerLine; ++i)
		{
			x = rand() % width;
			switches[x] = !switches[x];
		}

		cout << endl;

		this_thread::sleep_for(chrono::milliseconds(sleepTime));
		j++;


	}
	system("cls");
	system("Color 0F");
}

int main() {


	cesar myC;
	int opckey, key;
	string mensaje = "were no strangers to love you know the rules and so do i full commitments what im thinking of you wouldnt get this from any other guy i just wanna tell you how im feeling gotta make you understand";

	cout << "---------------------" << endl;
	cout << "CIFRADO Y DESCIFRADO " << endl;
	cout << "---------------------" << endl;
	cout << endl;
	cout << "1. Ingresar clave";
	cout << "=> ";
	cin >> opckey;


	if (opckey == 1)
	{

		system("cls");
		cout << "ingrese la clave que desea utilizar => ";
		cin >> key;

	}

	system("cls");
 

	myC.matrix();


	cout << "-------------------" << endl;
	cout << "Mensaje encriptado =>  "; myC.encriptar(mensaje, key); cout << endl;
	cout << "-------------------" << endl;

	cout << '\n';

	cout << "-----------------------" << endl;
	cout << "Mensaje Descencriptado =>  "; myC.desencriptar(mensaje, key); cout << endl;
	cout << "-----------------------" << endl;




}

// Ejecutar programa: Ctrl + F5 o menú Depurar > Iniciar sin depurar
// Depurar programa: F5 o menú Depurar > Iniciar depuración

// Sugerencias para primeros pasos: 1. Use la ventana del Explorador de soluciones para agregar y administrar archivos
//   2. Use la ventana de Team Explorer para conectar con el control de código fuente
//   3. Use la ventana de salida para ver la salida de compilación y otros mensajes
//   4. Use la ventana Lista de errores para ver los errores
//   5. Vaya a Proyecto > Agregar nuevo elemento para crear nuevos archivos de código, o a Proyecto > Agregar elemento existente para agregar archivos de código existentes al proyecto
//   6. En el futuro, para volver a abrir este proyecto, vaya a Archivo > Abrir > Proyecto y seleccione el archivo .sln
